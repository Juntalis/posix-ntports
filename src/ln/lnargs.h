/* lnargs.h */

/* File autogenerated by gengetopt version 2.20  */

#ifndef LNARGS_H
#define LNARGS_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "winln"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "v1.0.0"
#endif

struct gengetopt_args_info
{
  const char *help_help; /* Print help and exit help description.  */
  const char *directory_help; /* make a junction to a directory help description.  */
  const char *force_help; /* remove existing destination files help description.  */
  const char *interactive_help; /* prompt whether to remove destinations help description.  */
  const char *logical_help; /* make hard links to symbolic link references help description.  */
  const char *no_dereference_help; /* treat destination that is a symlink to a directory as if it were a normal file help description.  */
  const char *physical_help; /* make hard links directly to symbolic links help description.  */
  const char *symbolic_help; /* make symbolic links instead of hard links help description.  */
  char * target_directory_arg;	/* specify the DIRECTORY in which to create the links.  */
  char * target_directory_orig;	/* specify the DIRECTORY in which to create the links original value given at command line.  */
  const char *target_directory_help; /* specify the DIRECTORY in which to create the links help description.  */
  const char *no_target_directory_help; /* treat LINK_NAME as a normal file help description.  */
  const char *verbose_help; /* print name of each linked file help description.  */
  const char *cyglink_help; /* Create a cygwin symbolic link instead of a native Win32 symbolic link. (Assumes -s) help description.  */
  
  int help_given ;	/* Whether help was given.  */
  int directory_given ;	/* Whether directory was given.  */
  int force_given ;	/* Whether force was given.  */
  int interactive_given ;	/* Whether interactive was given.  */
  int logical_given ;	/* Whether logical was given.  */
  int no_dereference_given ;	/* Whether no-dereference was given.  */
  int physical_given ;	/* Whether physical was given.  */
  int symbolic_given ;	/* Whether symbolic was given.  */
  int target_directory_given ;	/* Whether target-directory was given.  */
  int no_target_directory_given ;	/* Whether no-target-directory was given.  */
  int verbose_given ;	/* Whether verbose was given.  */
  int cyglink_given ;	/* Whether cyglink was given.  */

  char **inputs ; /* unamed options */
  unsigned inputs_num ; /* unamed options number */
} ;

extern const char *gengetopt_args_info_purpose;
extern const char *gengetopt_args_info_usage;
extern const char *gengetopt_args_info_help[];

int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* LNARGS_H */
